from . import db

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False) # Increased length for hash
    # A unique link_id will be generated for each user to share
    link_id = db.Column(db.String(80), unique=True, nullable=False)
    feedbacks = db.relationship('Feedback', backref='user', lazy=True)

    def __repr__(self):
        return f'<User {self.username}>' # Changed to username for better representation

class Feedback(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    # How the anonymous user knows the person (e.g., classmate, colleague)
    anon_identifier = db.Column(db.String(200), nullable=True)
    feedback_text = db.Column(db.Text, nullable=False)
    context_text = db.Column(db.Text, nullable=True)
    # Optional email from the anonymous user
    anon_email = db.Column(db.String(120), nullable=True)
    summary = db.Column(db.Text, nullable=True)  # Summary generated by LLM
    sentiment = db.Column(db.String(50), nullable=True)  # Sentiment generated by
    constructive_criticism = db.Column(db.Text, nullable=True)  # Constructive criticism generated by LLM
    is_read = db.Column(db.Boolean, default=False, nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())

    def __repr__(self):
        return f'<Feedback {self.id} for User {self.user_id}>'